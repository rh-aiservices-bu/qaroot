---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-migrations
  namespace: qaroot-mvp
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: migrations
        image: image-registry.openshift-image-registry.svc:5000/openshift/postgresql:15-el9
        env:
        - name: PGHOST
          value: postgresql
        - name: PGPORT
          value: "5432"
        - name: PGDATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: database
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -U qaroot; do
            echo "Waiting for database..."
            sleep 2
          done

          echo "Running migrations..."

          # Migration 001: Initial schema (matching local 001_init.sql)
          psql << 'EOF'
          -- Enable required extensions
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE EXTENSION IF NOT EXISTS "pg_trgm";

          -- Users table
          CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            email VARCHAR(255) UNIQUE NOT NULL,
            username VARCHAR(100) UNIQUE,
            password_hash VARCHAR(255) NOT NULL,
            full_name VARCHAR(255),
            role VARCHAR(50) NOT NULL CHECK (role IN ('host', 'admin')),
            institution VARCHAR(255),
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            last_login TIMESTAMP WITH TIME ZONE,
            is_active BOOLEAN DEFAULT TRUE
          );

          CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
          CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
          CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);

          -- Sessions table with ENUM type
          CREATE TYPE session_status AS ENUM ('waiting', 'active', 'paused', 'completed');

          CREATE TABLE IF NOT EXISTS sessions (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            host_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            title VARCHAR(500) NOT NULL,
            description TEXT,
            session_pin VARCHAR(8) UNIQUE NOT NULL,
            session_status session_status DEFAULT 'waiting',
            collection_timer_duration INTEGER DEFAULT 60,
            collection_started_at TIMESTAMP WITH TIME ZONE,
            collection_ended_at TIMESTAMP WITH TIME ZONE,
            actual_start TIMESTAMP WITH TIME ZONE,
            ended_at TIMESTAMP WITH TIME ZONE,
            settings JSONB,
            participant_count INTEGER DEFAULT 0,
            question_count INTEGER DEFAULT 0,
            current_iteration INTEGER DEFAULT 1,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          CREATE INDEX IF NOT EXISTS idx_sessions_host ON sessions(host_id);
          CREATE INDEX IF NOT EXISTS idx_sessions_pin ON sessions(session_pin);
          CREATE INDEX IF NOT EXISTS idx_sessions_status ON sessions(session_status);
          CREATE INDEX IF NOT EXISTS idx_sessions_created ON sessions(created_at DESC);

          -- Participants table
          CREATE TABLE IF NOT EXISTS participants (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
            nickname VARCHAR(100) NOT NULL,
            device_fingerprint VARCHAR(255),
            joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            last_seen TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            is_active BOOLEAN DEFAULT TRUE,
            UNIQUE(session_id, nickname)
          );

          CREATE INDEX IF NOT EXISTS idx_participants_session ON participants(session_id);
          CREATE INDEX IF NOT EXISTS idx_participants_joined ON participants(joined_at);

          -- Questions table
          CREATE TABLE IF NOT EXISTS questions (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
            participant_id UUID REFERENCES participants(id) ON DELETE SET NULL,
            question_text TEXT NOT NULL,
            embedding float[],
            cluster_id UUID,
            submitted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            iteration INTEGER DEFAULT 1
          );

          CREATE INDEX IF NOT EXISTS idx_questions_session ON questions(session_id);
          CREATE INDEX IF NOT EXISTS idx_questions_cluster ON questions(cluster_id);
          CREATE INDEX IF NOT EXISTS idx_questions_submitted ON questions(submitted_at);

          -- Question clusters table
          CREATE TABLE IF NOT EXISTS question_clusters (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
            cluster_label VARCHAR(255),
            representative_question TEXT,
            question_count INTEGER DEFAULT 0,
            centroid_embedding float[],
            iteration INTEGER DEFAULT 1,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          CREATE INDEX IF NOT EXISTS idx_clusters_session ON question_clusters(session_id);
          CREATE INDEX IF NOT EXISTS idx_clusters_created ON question_clusters(created_at);

          -- Host chat messages table
          CREATE TABLE IF NOT EXISTS host_chat_messages (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
            role VARCHAR(20) NOT NULL CHECK (role IN ('user', 'assistant')),
            content TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          CREATE INDEX IF NOT EXISTS idx_chat_session ON host_chat_messages(session_id, created_at);

          -- Presentation collections table
          CREATE TABLE IF NOT EXISTS presentation_collections (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            owner_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
            title VARCHAR(500) NOT NULL,
            description TEXT,
            tags TEXT[],
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );

          CREATE INDEX IF NOT EXISTS idx_collections_owner ON presentation_collections(owner_id);
          CREATE INDEX IF NOT EXISTS idx_collections_created ON presentation_collections(created_at DESC);

          -- Iteration questions table (for tracking question prompts per iteration)
          CREATE TABLE IF NOT EXISTS iteration_questions (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
            iteration INTEGER NOT NULL,
            question_text TEXT NOT NULL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            UNIQUE(session_id, iteration)
          );

          CREATE INDEX IF NOT EXISTS idx_iteration_questions_session ON iteration_questions(session_id);
          CREATE INDEX IF NOT EXISTS idx_iteration_questions_iteration ON iteration_questions(session_id, iteration);

          -- Updated_at trigger function (using single quotes instead of $$)
          CREATE OR REPLACE FUNCTION update_updated_at_column()
          RETURNS TRIGGER AS '
          BEGIN
              NEW.updated_at = NOW();
              RETURN NEW;
          END;
          ' LANGUAGE plpgsql;

          -- Apply trigger to sessions
          DROP TRIGGER IF EXISTS update_sessions_updated_at ON sessions;
          CREATE TRIGGER update_sessions_updated_at
              BEFORE UPDATE ON sessions
              FOR EACH ROW
              EXECUTE FUNCTION update_updated_at_column();

          -- Apply trigger to presentation_collections
          DROP TRIGGER IF EXISTS update_collections_updated_at ON presentation_collections;
          CREATE TRIGGER update_collections_updated_at
              BEFORE UPDATE ON presentation_collections
              FOR EACH ROW
              EXECUTE FUNCTION update_updated_at_column();
          EOF

          # Create default admin user (password: admin123)
          psql << 'EOF'
          INSERT INTO users (email, password_hash, role)
          VALUES ('admin@qaroot.com', '$2b$10$rN5L8KqJXqVXqKZy4nYYb.7MRl6lZVJ8qQl3kJN9eJvYKNJn.Hm8O', 'host')
          ON CONFLICT (email) DO NOTHING;
          EOF

          echo "Migrations completed successfully!"
