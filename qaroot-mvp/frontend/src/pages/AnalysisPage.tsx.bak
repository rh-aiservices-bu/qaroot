import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Title,
  Card,
  CardBody,
  Button,
  Spinner,
  List,
  ListItem,
  Badge,
} from '@patternfly/react-core';
import { sessionsAPI } from '../services/api';

interface Question {
  id: string;
  question_text: string;
  participant_nickname?: string;
  submitted_at: string;
  iteration: number;
}

interface Cluster {
  id: string;
  cluster_label: string;
  representative_question: string;
  question_count: number;
  questions: Question[];
  iteration: number;
}

interface IterationGroup {
  iteration: number;
  question_text?: string;
  questions: Question[];
  clusters: Cluster[];
}

export default function AnalysisPage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [clusters, setClusters] = useState<Cluster[]>([]);
  const [allQuestions, setAllQuestions] = useState<Question[]>([]);
  const [iterations, setIterations] = useState<IterationGroup[]>([]);
  const [sessionTitle, setSessionTitle] = useState('');
  const [sessionDescription, setSessionDescription] = useState('');
  const [loading, setLoading] = useState(true);
  const [analyzing, setAnalyzing] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!id) return;

    const fetchData = async () => {
      try {
        const [sessionResponse, clustersResponse, questionsResponse, iterationQuestionsResponse] = await Promise.all([
          sessionsAPI.get(id),
          sessionsAPI.getClusters(id),
          sessionsAPI.getQuestions(id),
          sessionsAPI.getIterationQuestions(id)
        ]);
        const clusterData = clustersResponse.data.clusters || [];
        const questionData = questionsResponse.data.questions || [];
        const session = sessionResponse.data.session;
        const iterationQuestionsData = iterationQuestionsResponse.data.iteration_questions || [];

        setSessionTitle(session.title || '');
        setSessionDescription(session.description || '');
        setClusters(clusterData);
        setAllQuestions(questionData);

        // Create map of iteration questions
        const iterationQuestionsMap = new Map<number, string>();
        iterationQuestionsData.forEach((iq: any) => {
          iterationQuestionsMap.set(iq.iteration, iq.question_text);
        });

        // Group by iteration
        const iterationMap = new Map<number, IterationGroup>();

        questionData.forEach((q: Question) => {
          const iter = q.iteration || 1;
          if (!iterationMap.has(iter)) {
            iterationMap.set(iter, {
              iteration: iter,
              question_text: iterationQuestionsMap.get(iter),
              questions: [],
              clusters: []
            });
          }
          iterationMap.get(iter)!.questions.push(q);
        });

        clusterData.forEach((c: Cluster) => {
          const iter = c.iteration || 1;
          if (!iterationMap.has(iter)) {
            iterationMap.set(iter, {
              iteration: iter,
              question_text: iterationQuestionsMap.get(iter),
              questions: [],
              clusters: []
            });
          }
          iterationMap.get(iter)!.clusters.push(c);
        });

        const sortedIterations = Array.from(iterationMap.values()).sort((a, b) => a.iteration - b.iteration);
        setIterations(sortedIterations);
      } catch (err: any) {
        console.error('Failed to fetch analysis data:', err);
        setError('Failed to load analysis results');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleAnalyze = async () => {
    if (!id) return;

    setAnalyzing(true);
    setError('');

    try {
      await sessionsAPI.analyze(id);

      let pollCount = 0;
      const maxPolls = 30; // Poll for up to 60 seconds (30 * 2s)

      // Poll for results every 2 seconds
      const pollInterval = setInterval(async () => {
        pollCount++;

        try {
          const [clustersResponse, questionsResponse] = await Promise.all([
            sessionsAPI.getClusters(id),
            sessionsAPI.getQuestions(id)
          ]);

          const clusterData = clustersResponse.data.clusters || [];
          const questionData = questionsResponse.data.questions || [];

          setClusters(clusterData);
          setAllQuestions(questionData);

          // Regroup by iteration
          const iterationMap = new Map<number, IterationGroup>();
          questionData.forEach((q: Question) => {
            const iter = q.iteration || 1;
            if (!iterationMap.has(iter)) {
              iterationMap.set(iter, { iteration: iter, questions: [], clusters: [] });
            }
            iterationMap.get(iter)!.questions.push(q);
          });
          clusterData.forEach((c: Cluster) => {
            const iter = c.iteration || 1;
            if (!iterationMap.has(iter)) {
              iterationMap.set(iter, { iteration: iter, questions: [], clusters: [] });
            }
            iterationMap.get(iter)!.clusters.push(c);
          });
          const sortedIterations = Array.from(iterationMap.values()).sort((a, b) => a.iteration - b.iteration);
          setIterations(sortedIterations);

          // Stop polling if we have clusters or max polls reached
          if (clusterData.length > 0 || pollCount >= maxPolls) {
            clearInterval(pollInterval);
            setAnalyzing(false);

            if (pollCount >= maxPolls && clusterData.length === 0) {
              setError('Analysis is taking longer than expected. Please try again or check the worker logs.');
            }
          }
        } catch (err) {
          console.error('Failed to fetch clusters:', err);
          if (pollCount >= maxPolls) {
            clearInterval(pollInterval);
            setAnalyzing(false);
            setError('Failed to fetch analysis results');
          }
        }
      }, 2000);

    } catch (err: any) {
      console.error('Failed to start analysis:', err);
      setError('Failed to start analysis');
      setAnalyzing(false);
    }
  };

  if (loading) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
      }}>
        <Spinner size="xl" />
      </div>
    );
  }

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#f0f0f0',
    }}>
      {/* Header */}
      <div style={{ backgroundColor: '#fff', borderBottom: '1px solid #d2d2d2', padding: '1rem 2rem' }}>
        <div style={{
          maxWidth: '1400px',
          margin: '0 auto',
        }}>
          {/* Breadcrumb */}
          <div style={{ fontSize: '0.875rem', color: '#666', marginBottom: '0.5rem' }}>
            <span
              onClick={() => navigate('/dashboard')}
              style={{ cursor: 'pointer', color: '#0066cc' }}
            >
              All Sessions
            </span>
            {' '}/{' '}
            <span
              onClick={() => navigate(`/session/${id}`)}
              style={{ cursor: 'pointer', color: '#0066cc' }}
            >
              Session
            </span>
            {' '}/{' '}
            <span>Analysis</span>
          </div>

          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
          }}>
            <div style={{ flex: 1 }}>
              <Title headingLevel="h1" size="xl">{sessionTitle}</Title>
            </div>
            <div style={{ display: 'flex', gap: '1rem' }}>
              <Button
                variant="primary"
                onClick={handleAnalyze}
                isDisabled={analyzing || allQuestions.length === 0}
              >
                {analyzing ? 'Analyzing...' : 'Analyze Responses'}
              </Button>
              <Button variant="secondary" onClick={() => navigate(`/session/${id}`)}>
                ‚Üê Back to Session
              </Button>
            </div>
          </div>
        </div>
      </div>

      {error && (
        <div style={{ padding: '1rem 2rem', maxWidth: '1400px', margin: '0 auto' }}>
          <Card style={{ backgroundColor: '#fef0ee' }}>
            <CardBody>{error}</CardBody>
          </Card>
        </div>
      )}

      {/* Split Screen Layout */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: '1fr 1fr',
        height: 'calc(100vh - 80px)',
        maxWidth: '1400px',
        margin: '0 auto',
        gap: '0'
      }}>
        {/* Left: Raw Answers by Iteration */}
        <div style={{
          backgroundColor: '#fff',
          borderRight: '1px solid #d2d2d2',
          overflowY: 'auto',
          padding: '2rem'
        }}>
          <Title headingLevel="h2" size="lg" style={{ marginBottom: '1.5rem' }}>
            All Responses ({allQuestions.length})
          </Title>
          {allQuestions.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '3rem', color: '#666' }}>
              <p>No responses submitted yet</p>
            </div>
          ) : (
            <>
              {iterations.map((iter) => (
                <div key={iter.iteration} style={{ marginBottom: '2rem' }}>
                  {iterations.length > 1 && (
                    <Title headingLevel="h3" size="md" style={{ marginBottom: '0.5rem', color: '#0066cc' }}>
                      Round {iter.iteration}
                    </Title>
                  )}
                  {iter.question_text && (
                    <div style={{
                      marginBottom: '1rem',
                      padding: '0.75rem 1rem',
                      backgroundColor: '#e7f1fa',
                      borderLeft: '4px solid #0066cc',
                      borderRadius: '4px',
                      fontSize: '0.9rem',
                      color: '#151515'
                    }}>
                      <strong>Question:</strong> {iter.question_text}
                    </div>
                  )}
                  <List isPlain>
                    {iter.questions.map((q, index) => (
                      <ListItem key={q.id} style={{
                        padding: '1rem',
                        marginBottom: '0.5rem',
                        backgroundColor: '#f5f5f5',
                        borderRadius: '4px',
                      }}>
                        <div style={{ display: 'flex', gap: '1rem' }}>
                          <div style={{
                            fontWeight: 'bold',
                            color: '#666',
                            minWidth: '30px'
                          }}>
                            #{index + 1}
                          </div>
                          <div style={{ flex: 1 }}>
                            <div style={{ fontWeight: 500, marginBottom: '0.25rem' }}>
                              {q.question_text}
                            </div>
                            <div style={{ fontSize: '0.875rem', color: '#666' }}>
                              {q.participant_nickname || 'Anonymous'} ‚Ä¢ {new Date(q.submitted_at).toLocaleTimeString()}
                            </div>
                          </div>
                        </div>
                      </ListItem>
                    ))}
                  </List>
                </div>
              ))}
            </>
          )}
        </div>

        {/* Right: Summarized/Clustered Responses */}
        <div style={{
          backgroundColor: '#fff',
          overflowY: 'auto',
          padding: '2rem'
        }}>
          <Title headingLevel="h2" size="lg" style={{ marginBottom: '1.5rem' }}>
            Clustered Responses ({clusters.length} {clusters.length === 1 ? 'cluster' : 'clusters'})
          </Title>
          {analyzing ? (
            <div style={{ textAlign: 'center', padding: '3rem', color: '#666' }}>
              <Spinner size="xl" style={{ marginBottom: '1rem' }} />
              <Title headingLevel="h3" size="md" style={{ marginBottom: '0.5rem' }}>
                Analyzing responses...
              </Title>
              <p>Clustering similar responses using AI</p>
            </div>
          ) : clusters.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '3rem', color: '#666' }}>
              <Title headingLevel="h3" size="md" style={{ marginBottom: '0.5rem' }}>
                No analysis yet
              </Title>
              <p>Click "Analyze Responses" button above to cluster similar responses</p>
            </div>
          ) : (
            <>
              {iterations.map((iter) => (
                <div key={iter.iteration} style={{ marginBottom: '2.5rem' }}>
                  {iterations.length > 1 && (
                    <Title headingLevel="h3" size="md" style={{ marginBottom: '0.5rem', color: '#0066cc' }}>
                      Round {iter.iteration} ({iter.clusters.length} {iter.clusters.length === 1 ? 'cluster' : 'clusters'})
                    </Title>
                  )}
                  {iter.question_text && (
                    <div style={{
                      marginBottom: '1rem',
                      padding: '0.75rem 1rem',
                      backgroundColor: '#e7f1fa',
                      borderLeft: '4px solid #0066cc',
                      borderRadius: '4px',
                      fontSize: '0.9rem',
                      color: '#151515'
                    }}>
                      <strong>Question:</strong> {iter.question_text}
                    </div>
                  )}
                  {iter.clusters.length === 0 ? (
                    <div style={{ textAlign: 'center', padding: '2rem', color: '#666', backgroundColor: '#f5f5f5', borderRadius: '4px' }}>
                      <p>No clusters for this round yet. Click "Analyze Responses" to cluster responses.</p>
                    </div>
                  ) : (
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>
                      {iter.clusters.map((cluster) => (
                        <div key={cluster.id} style={{
                          padding: '1.5rem',
                          backgroundColor: '#f0f9ff',
                          borderLeft: '4px solid #0066cc',
                          borderRadius: '4px',
                        }}>
                          <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem', marginBottom: '0.75rem' }}>
                            <Badge>{cluster.question_count}</Badge>
                            <Title headingLevel="h3" size="md">
                              {cluster.cluster_label || 'Topic'}
                            </Title>
                          </div>
                          {cluster.representative_question && (
                            <p style={{
                              fontSize: '1.125rem',
                              fontWeight: 500,
                              color: '#151515',
                              marginBottom: '1rem',
                            }}>
                              "{cluster.representative_question}"
                            </p>
                          )}
                          {cluster.questions && cluster.questions.length > 0 && (
                            <div style={{ marginTop: '1rem', paddingTop: '1rem', borderTop: '1px solid #d2d2d2' }}>
                              <div style={{ fontSize: '0.875rem', fontWeight: 600, marginBottom: '0.5rem', color: '#666' }}>
                                Responses in this cluster:
                              </div>
                              <List isPlain>
                                {cluster.questions.map((q, idx) => (
                                  <ListItem key={q.id} style={{
                                    padding: '0.5rem 0',
                                    fontSize: '0.9rem',
                                    color: '#151515',
                                  }}>
                                    <div style={{ display: 'flex', gap: '0.5rem' }}>
                                      <span style={{ color: '#666' }}>‚Ä¢</span>
                                      <div>
                                        <div>{q.question_text}</div>
                                        <div style={{ fontSize: '0.75rem', color: '#666', marginTop: '0.25rem' }}>
                                          ‚Äî {q.participant_nickname || 'Anonymous'}
                                        </div>
                                      </div>
                                    </div>
                                  </ListItem>
                                ))}
                              </List>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </>
          )}
        </div>
      </div>
    </div>
  );
}
